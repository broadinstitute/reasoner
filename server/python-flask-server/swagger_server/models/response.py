# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.result import Result  # noqa: F401,E501
from swagger_server import util


class Response(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, context: str=None, type: str=None, id: str=None, reasoner_id: str=None, tool_version: str=None, schema_version: str=None, datetime: str=None, original_question_text: str=None, restated_question_text: str=None, known_query_type_id: str=None, terms: object=None, n_results: int=None, response_code: str=None, result_code: str=None, message: str=None, table_column_names: List[str]=None, result_list: List[Result]=None):  # noqa: E501
        """Response - a model defined in Swagger

        :param context: The context of this Response.  # noqa: E501
        :type context: str
        :param type: The type of this Response.  # noqa: E501
        :type type: str
        :param id: The id of this Response.  # noqa: E501
        :type id: str
        :param reasoner_id: The reasoner_id of this Response.  # noqa: E501
        :type reasoner_id: str
        :param tool_version: The tool_version of this Response.  # noqa: E501
        :type tool_version: str
        :param schema_version: The schema_version of this Response.  # noqa: E501
        :type schema_version: str
        :param datetime: The datetime of this Response.  # noqa: E501
        :type datetime: str
        :param original_question_text: The original_question_text of this Response.  # noqa: E501
        :type original_question_text: str
        :param restated_question_text: The restated_question_text of this Response.  # noqa: E501
        :type restated_question_text: str
        :param known_query_type_id: The known_query_type_id of this Response.  # noqa: E501
        :type known_query_type_id: str
        :param terms: The terms of this Response.  # noqa: E501
        :type terms: object
        :param n_results: The n_results of this Response.  # noqa: E501
        :type n_results: int
        :param response_code: The response_code of this Response.  # noqa: E501
        :type response_code: str
        :param result_code: The result_code of this Response.  # noqa: E501
        :type result_code: str
        :param message: The message of this Response.  # noqa: E501
        :type message: str
        :param table_column_names: The table_column_names of this Response.  # noqa: E501
        :type table_column_names: List[str]
        :param result_list: The result_list of this Response.  # noqa: E501
        :type result_list: List[Result]
        """
        self.swagger_types = {
            'context': str,
            'type': str,
            'id': str,
            'reasoner_id': str,
            'tool_version': str,
            'schema_version': str,
            'datetime': str,
            'original_question_text': str,
            'restated_question_text': str,
            'known_query_type_id': str,
            'terms': object,
            'n_results': int,
            'response_code': str,
            'result_code': str,
            'message': str,
            'table_column_names': List[str],
            'result_list': List[Result]
        }

        self.attribute_map = {
            'context': 'context',
            'type': 'type',
            'id': 'id',
            'reasoner_id': 'reasoner_id',
            'tool_version': 'tool_version',
            'schema_version': 'schema_version',
            'datetime': 'datetime',
            'original_question_text': 'original_question_text',
            'restated_question_text': 'restated_question_text',
            'known_query_type_id': 'known_query_type_id',
            'terms': 'terms',
            'n_results': 'n_results',
            'response_code': 'response_code',
            'result_code': 'result_code',
            'message': 'message',
            'table_column_names': 'table_column_names',
            'result_list': 'result_list'
        }

        self._context = context
        self._type = type
        self._id = id
        self._reasoner_id = reasoner_id
        self._tool_version = tool_version
        self._schema_version = schema_version
        self._datetime = datetime
        self._original_question_text = original_question_text
        self._restated_question_text = restated_question_text
        self._known_query_type_id = known_query_type_id
        self._terms = terms
        self._n_results = n_results
        self._response_code = response_code
        self._result_code = result_code
        self._message = message
        self._table_column_names = table_column_names
        self._result_list = result_list

    @classmethod
    def from_dict(cls, dikt) -> 'Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Response of this Response.  # noqa: E501
        :rtype: Response
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self) -> str:
        """Gets the context of this Response.

        JSON-LD context URI  # noqa: E501

        :return: The context of this Response.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context: str):
        """Sets the context of this Response.

        JSON-LD context URI  # noqa: E501

        :param context: The context of this Response.
        :type context: str
        """

        self._context = context

    @property
    def type(self) -> str:
        """Gets the type of this Response.

        Entity type of this response  # noqa: E501

        :return: The type of this Response.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Response.

        Entity type of this response  # noqa: E501

        :param type: The type of this Response.
        :type type: str
        """

        self._type = type

    @property
    def id(self) -> str:
        """Gets the id of this Response.

        URI for this response  # noqa: E501

        :return: The id of this Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Response.

        URI for this response  # noqa: E501

        :param id: The id of this Response.
        :type id: str
        """

        self._id = id

    @property
    def reasoner_id(self) -> str:
        """Gets the reasoner_id of this Response.

        Identifier string of the reasoner that provided this response (e.g., RTX, Robokop, Indigo, Integrator)  # noqa: E501

        :return: The reasoner_id of this Response.
        :rtype: str
        """
        return self._reasoner_id

    @reasoner_id.setter
    def reasoner_id(self, reasoner_id: str):
        """Sets the reasoner_id of this Response.

        Identifier string of the reasoner that provided this response (e.g., RTX, Robokop, Indigo, Integrator)  # noqa: E501

        :param reasoner_id: The reasoner_id of this Response.
        :type reasoner_id: str
        """

        self._reasoner_id = reasoner_id

    @property
    def tool_version(self) -> str:
        """Gets the tool_version of this Response.

        Version label of the tool that generated this response  # noqa: E501

        :return: The tool_version of this Response.
        :rtype: str
        """
        return self._tool_version

    @tool_version.setter
    def tool_version(self, tool_version: str):
        """Sets the tool_version of this Response.

        Version label of the tool that generated this response  # noqa: E501

        :param tool_version: The tool_version of this Response.
        :type tool_version: str
        """

        self._tool_version = tool_version

    @property
    def schema_version(self) -> str:
        """Gets the schema_version of this Response.

        Version label of this JSON-LD schema  # noqa: E501

        :return: The schema_version of this Response.
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version: str):
        """Sets the schema_version of this Response.

        Version label of this JSON-LD schema  # noqa: E501

        :param schema_version: The schema_version of this Response.
        :type schema_version: str
        """

        self._schema_version = schema_version

    @property
    def datetime(self) -> str:
        """Gets the datetime of this Response.

        ISO standard datetime string for the time that this response was generated  # noqa: E501

        :return: The datetime of this Response.
        :rtype: str
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime: str):
        """Sets the datetime of this Response.

        ISO standard datetime string for the time that this response was generated  # noqa: E501

        :param datetime: The datetime of this Response.
        :type datetime: str
        """

        self._datetime = datetime

    @property
    def original_question_text(self) -> str:
        """Gets the original_question_text of this Response.

        The original question text typed in by the user  # noqa: E501

        :return: The original_question_text of this Response.
        :rtype: str
        """
        return self._original_question_text

    @original_question_text.setter
    def original_question_text(self, original_question_text: str):
        """Sets the original_question_text of this Response.

        The original question text typed in by the user  # noqa: E501

        :param original_question_text: The original_question_text of this Response.
        :type original_question_text: str
        """

        self._original_question_text = original_question_text

    @property
    def restated_question_text(self) -> str:
        """Gets the restated_question_text of this Response.

        A precise restatement of the question, as understood by the Translator, for which the answer applies. The user should verify that the restated question matches the intent of their original question (it might not).  # noqa: E501

        :return: The restated_question_text of this Response.
        :rtype: str
        """
        return self._restated_question_text

    @restated_question_text.setter
    def restated_question_text(self, restated_question_text: str):
        """Sets the restated_question_text of this Response.

        A precise restatement of the question, as understood by the Translator, for which the answer applies. The user should verify that the restated question matches the intent of their original question (it might not).  # noqa: E501

        :param restated_question_text: The restated_question_text of this Response.
        :type restated_question_text: str
        """

        self._restated_question_text = restated_question_text

    @property
    def known_query_type_id(self) -> str:
        """Gets the known_query_type_id of this Response.

        The query type id if one is known for the query/response (as defined in https://docs.google.com/spreadsheets/d/18zW81wteUfOn3rFRVG0z8mW-ecNhdsfD_6s73ETJnUw/edit#gid=1742835901 )  # noqa: E501

        :return: The known_query_type_id of this Response.
        :rtype: str
        """
        return self._known_query_type_id

    @known_query_type_id.setter
    def known_query_type_id(self, known_query_type_id: str):
        """Sets the known_query_type_id of this Response.

        The query type id if one is known for the query/response (as defined in https://docs.google.com/spreadsheets/d/18zW81wteUfOn3rFRVG0z8mW-ecNhdsfD_6s73ETJnUw/edit#gid=1742835901 )  # noqa: E501

        :param known_query_type_id: The known_query_type_id of this Response.
        :type known_query_type_id: str
        """

        self._known_query_type_id = known_query_type_id

    @property
    def terms(self) -> object:
        """Gets the terms of this Response.

        The is string of the query type id if one is known for the query/response  # noqa: E501

        :return: The terms of this Response.
        :rtype: object
        """
        return self._terms

    @terms.setter
    def terms(self, terms: object):
        """Sets the terms of this Response.

        The is string of the query type id if one is known for the query/response  # noqa: E501

        :param terms: The terms of this Response.
        :type terms: object
        """

        self._terms = terms

    @property
    def n_results(self) -> int:
        """Gets the n_results of this Response.

        Total number of results in the response (which may be less than what is returned if limits were placed on the results to return)  # noqa: E501

        :return: The n_results of this Response.
        :rtype: int
        """
        return self._n_results

    @n_results.setter
    def n_results(self, n_results: int):
        """Sets the n_results of this Response.

        Total number of results in the response (which may be less than what is returned if limits were placed on the results to return)  # noqa: E501

        :param n_results: The n_results of this Response.
        :type n_results: int
        """

        self._n_results = n_results

    @property
    def response_code(self) -> str:
        """Gets the response_code of this Response.

        Set to OK for success, or some other short string to indicate and error (e.g., KGUnavailable, TermNotFound, etc.)  # noqa: E501

        :return: The response_code of this Response.
        :rtype: str
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code: str):
        """Sets the response_code of this Response.

        Set to OK for success, or some other short string to indicate and error (e.g., KGUnavailable, TermNotFound, etc.)  # noqa: E501

        :param response_code: The response_code of this Response.
        :type response_code: str
        """

        self._response_code = response_code

    @property
    def result_code(self) -> str:
        """Gets the result_code of this Response.

        DEPRECATED  # noqa: E501

        :return: The result_code of this Response.
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code: str):
        """Sets the result_code of this Response.

        DEPRECATED  # noqa: E501

        :param result_code: The result_code of this Response.
        :type result_code: str
        """

        self._result_code = result_code

    @property
    def message(self) -> str:
        """Gets the message of this Response.

        Extended message denoting the success or mode of failure for the response  # noqa: E501

        :return: The message of this Response.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this Response.

        Extended message denoting the success or mode of failure for the response  # noqa: E501

        :param message: The message of this Response.
        :type message: str
        """

        self._message = message

    @property
    def table_column_names(self) -> List[str]:
        """Gets the table_column_names of this Response.

        List of column names that corresponds to the row_data for each result  # noqa: E501

        :return: The table_column_names of this Response.
        :rtype: List[str]
        """
        return self._table_column_names

    @table_column_names.setter
    def table_column_names(self, table_column_names: List[str]):
        """Sets the table_column_names of this Response.

        List of column names that corresponds to the row_data for each result  # noqa: E501

        :param table_column_names: The table_column_names of this Response.
        :type table_column_names: List[str]
        """

        self._table_column_names = table_column_names

    @property
    def result_list(self) -> List[Result]:
        """Gets the result_list of this Response.


        :return: The result_list of this Response.
        :rtype: List[Result]
        """
        return self._result_list

    @result_list.setter
    def result_list(self, result_list: List[Result]):
        """Sets the result_list of this Response.


        :param result_list: The result_list of this Response.
        :type result_list: List[Result]
        """

        self._result_list = result_list
