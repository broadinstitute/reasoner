# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.query import Query  # noqa: F401,E501
from swagger_server.models.result import Result  # noqa: F401,E501
from swagger_server import util


class Response(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, context: str=None, type: str=None, id: str=None, tool_version: str=None, schema_version: str=None, datetime: str=None, query: Query=None, result_code: str=None, message: str=None, result_list: List[Result]=None):  # noqa: E501
        """Response - a model defined in Swagger

        :param context: The context of this Response.  # noqa: E501
        :type context: str
        :param type: The type of this Response.  # noqa: E501
        :type type: str
        :param id: The id of this Response.  # noqa: E501
        :type id: str
        :param tool_version: The tool_version of this Response.  # noqa: E501
        :type tool_version: str
        :param schema_version: The schema_version of this Response.  # noqa: E501
        :type schema_version: str
        :param datetime: The datetime of this Response.  # noqa: E501
        :type datetime: str
        :param query: The query of this Response.  # noqa: E501
        :type query: Query
        :param result_code: The result_code of this Response.  # noqa: E501
        :type result_code: str
        :param message: The message of this Response.  # noqa: E501
        :type message: str
        :param result_list: The result_list of this Response.  # noqa: E501
        :type result_list: List[Result]
        """
        self.swagger_types = {
            'context': str,
            'type': str,
            'id': str,
            'tool_version': str,
            'schema_version': str,
            'datetime': str,
            'query': Query,
            'result_code': str,
            'message': str,
            'result_list': List[Result]
        }

        self.attribute_map = {
            'context': 'context',
            'type': 'type',
            'id': 'id',
            'tool_version': 'tool_version',
            'schema_version': 'schema_version',
            'datetime': 'datetime',
            'query': 'query',
            'result_code': 'result_code',
            'message': 'message',
            'result_list': 'result_list'
        }

        self._context = context
        self._type = type
        self._id = id
        self._tool_version = tool_version
        self._schema_version = schema_version
        self._datetime = datetime
        self._query = query
        self._result_code = result_code
        self._message = message
        self._result_list = result_list

    @classmethod
    def from_dict(cls, dikt) -> 'Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Response of this Response.  # noqa: E501
        :rtype: Response
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self) -> str:
        """Gets the context of this Response.

        JSON-LD context URI  # noqa: E501

        :return: The context of this Response.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context: str):
        """Sets the context of this Response.

        JSON-LD context URI  # noqa: E501

        :param context: The context of this Response.
        :type context: str
        """

        self._context = context

    @property
    def type(self) -> str:
        """Gets the type of this Response.

        Entity type of this response  # noqa: E501

        :return: The type of this Response.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Response.

        Entity type of this response  # noqa: E501

        :param type: The type of this Response.
        :type type: str
        """

        self._type = type

    @property
    def id(self) -> str:
        """Gets the id of this Response.

        URI for this response  # noqa: E501

        :return: The id of this Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Response.

        URI for this response  # noqa: E501

        :param id: The id of this Response.
        :type id: str
        """

        self._id = id

    @property
    def tool_version(self) -> str:
        """Gets the tool_version of this Response.

        Version label of the tool that generated this response  # noqa: E501

        :return: The tool_version of this Response.
        :rtype: str
        """
        return self._tool_version

    @tool_version.setter
    def tool_version(self, tool_version: str):
        """Sets the tool_version of this Response.

        Version label of the tool that generated this response  # noqa: E501

        :param tool_version: The tool_version of this Response.
        :type tool_version: str
        """

        self._tool_version = tool_version

    @property
    def schema_version(self) -> str:
        """Gets the schema_version of this Response.

        Version label of this JSON-LD schema  # noqa: E501

        :return: The schema_version of this Response.
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version: str):
        """Sets the schema_version of this Response.

        Version label of this JSON-LD schema  # noqa: E501

        :param schema_version: The schema_version of this Response.
        :type schema_version: str
        """

        self._schema_version = schema_version

    @property
    def datetime(self) -> str:
        """Gets the datetime of this Response.

        ISO standard datetime string for the time that this response was generated  # noqa: E501

        :return: The datetime of this Response.
        :rtype: str
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime: str):
        """Sets the datetime of this Response.

        ISO standard datetime string for the time that this response was generated  # noqa: E501

        :param datetime: The datetime of this Response.
        :type datetime: str
        """

        self._datetime = datetime

    @property
    def query(self) -> Query:
        """Gets the query of this Response.


        :return: The query of this Response.
        :rtype: Query
        """
        return self._query

    @query.setter
    def query(self, query: Query):
        """Sets the query of this Response.


        :param query: The query of this Response.
        :type query: Query
        """

        self._query = query

    @property
    def result_code(self) -> str:
        """Gets the result_code of this Response.

        Set to OK for success, or some other short string to indicate and error (e.g., KGUnavailable, TermNotFound, etc.)  # noqa: E501

        :return: The result_code of this Response.
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code: str):
        """Sets the result_code of this Response.

        Set to OK for success, or some other short string to indicate and error (e.g., KGUnavailable, TermNotFound, etc.)  # noqa: E501

        :param result_code: The result_code of this Response.
        :type result_code: str
        """

        self._result_code = result_code

    @property
    def message(self) -> str:
        """Gets the message of this Response.

        Extended message denoting the success or mode of failure for the response  # noqa: E501

        :return: The message of this Response.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this Response.

        Extended message denoting the success or mode of failure for the response  # noqa: E501

        :param message: The message of this Response.
        :type message: str
        """

        self._message = message

    @property
    def result_list(self) -> List[Result]:
        """Gets the result_list of this Response.


        :return: The result_list of this Response.
        :rtype: List[Result]
        """
        return self._result_list

    @result_list.setter
    def result_list(self, result_list: List[Result]):
        """Sets the result_list of this Response.


        :param result_list: The result_list of this Response.
        :type result_list: List[Result]
        """

        self._result_list = result_list
