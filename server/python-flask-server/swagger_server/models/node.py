# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.node_attribute import NodeAttribute  # noqa: F401,E501
from swagger_server import util


class Node(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, category: str=None, name: str=None, uri: str=None, symbol: str=None, description: str=None, node_attributes: List[NodeAttribute]=None):  # noqa: E501
        """Node - a model defined in Swagger

        :param id: The id of this Node.  # noqa: E501
        :type id: str
        :param category: The category of this Node.  # noqa: E501
        :type category: str
        :param name: The name of this Node.  # noqa: E501
        :type name: str
        :param uri: The uri of this Node.  # noqa: E501
        :type uri: str
        :param symbol: The symbol of this Node.  # noqa: E501
        :type symbol: str
        :param description: The description of this Node.  # noqa: E501
        :type description: str
        :param node_attributes: The node_attributes of this Node.  # noqa: E501
        :type node_attributes: List[NodeAttribute]
        """
        self.swagger_types = {
            'id': str,
            'category': str,
            'name': str,
            'uri': str,
            'symbol': str,
            'description': str,
            'node_attributes': List[NodeAttribute]
        }

        self.attribute_map = {
            'id': 'id',
            'category': 'category',
            'name': 'name',
            'uri': 'uri',
            'symbol': 'symbol',
            'description': 'description',
            'node_attributes': 'node_attributes'
        }

        self._id = id
        self._category = category
        self._name = name
        self._uri = uri
        self._symbol = symbol
        self._description = description
        self._node_attributes = node_attributes

    @classmethod
    def from_dict(cls, dikt) -> 'Node':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Node of this Node.  # noqa: E501
        :rtype: Node
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Node.

        identifier for this response  # noqa: E501

        :return: The id of this Node.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Node.

        identifier for this response  # noqa: E501

        :param id: The id of this Node.
        :type id: str
        """

        self._id = id

    @property
    def category(self) -> str:
        """Gets the category of this Node.

        Entity type of this node (e.g., protein, disease, etc.)  # noqa: E501

        :return: The category of this Node.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """Sets the category of this Node.

        Entity type of this node (e.g., protein, disease, etc.)  # noqa: E501

        :param category: The category of this Node.
        :type category: str
        """

        self._category = category

    @property
    def name(self) -> str:
        """Gets the name of this Node.

        Formal name of the entity  # noqa: E501

        :return: The name of this Node.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Node.

        Formal name of the entity  # noqa: E501

        :param name: The name of this Node.
        :type name: str
        """

        self._name = name

    @property
    def uri(self) -> str:
        """Gets the uri of this Node.

        Full URI corresponding to the bioentity  # noqa: E501

        :return: The uri of this Node.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri: str):
        """Sets the uri of this Node.

        Full URI corresponding to the bioentity  # noqa: E501

        :param uri: The uri of this Node.
        :type uri: str
        """

        self._uri = uri

    @property
    def symbol(self) -> str:
        """Gets the symbol of this Node.

        Short abbreviation or symbol for this entity  # noqa: E501

        :return: The symbol of this Node.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol: str):
        """Sets the symbol of this Node.

        Short abbreviation or symbol for this entity  # noqa: E501

        :param symbol: The symbol of this Node.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def description(self) -> str:
        """Gets the description of this Node.

        One to three sentences of description/definition of this entity  # noqa: E501

        :return: The description of this Node.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Node.

        One to three sentences of description/definition of this entity  # noqa: E501

        :param description: The description of this Node.
        :type description: str
        """

        self._description = description

    @property
    def node_attributes(self) -> List[NodeAttribute]:
        """Gets the node_attributes of this Node.

        A list of arbitrary attributes for the node  # noqa: E501

        :return: The node_attributes of this Node.
        :rtype: List[NodeAttribute]
        """
        return self._node_attributes

    @node_attributes.setter
    def node_attributes(self, node_attributes: List[NodeAttribute]):
        """Sets the node_attributes of this Node.

        A list of arbitrary attributes for the node  # noqa: E501

        :param node_attributes: The node_attributes of this Node.
        :type node_attributes: List[NodeAttribute]
        """

        self._node_attributes = node_attributes
