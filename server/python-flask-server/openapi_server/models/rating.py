# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Rating(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description=None, rating_id=None, name=None, score=None, tag=None):  # noqa: E501
        """Rating - a model defined in OpenAPI

        :param description: The description of this Rating.  # noqa: E501
        :type description: str
        :param rating_id: The rating_id of this Rating.  # noqa: E501
        :type rating_id: int
        :param name: The name of this Rating.  # noqa: E501
        :type name: str
        :param score: The score of this Rating.  # noqa: E501
        :type score: float
        :param tag: The tag of this Rating.  # noqa: E501
        :type tag: str
        """
        self.openapi_types = {
            'description': str,
            'rating_id': int,
            'name': str,
            'score': float,
            'tag': str
        }

        self.attribute_map = {
            'description': 'description',
            'rating_id': 'rating_id',
            'name': 'name',
            'score': 'score',
            'tag': 'tag'
        }

        self._description = description
        self._rating_id = rating_id
        self._name = name
        self._score = score
        self._tag = tag

    @classmethod
    def from_dict(cls, dikt) -> 'Rating':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Rating of this Rating.  # noqa: E501
        :rtype: Rating
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Rating.


        :return: The description of this Rating.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Rating.


        :param description: The description of this Rating.
        :type description: str
        """

        self._description = description

    @property
    def rating_id(self):
        """Gets the rating_id of this Rating.


        :return: The rating_id of this Rating.
        :rtype: int
        """
        return self._rating_id

    @rating_id.setter
    def rating_id(self, rating_id):
        """Sets the rating_id of this Rating.


        :param rating_id: The rating_id of this Rating.
        :type rating_id: int
        """

        self._rating_id = rating_id

    @property
    def name(self):
        """Gets the name of this Rating.


        :return: The name of this Rating.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Rating.


        :param name: The name of this Rating.
        :type name: str
        """

        self._name = name

    @property
    def score(self):
        """Gets the score of this Rating.


        :return: The score of this Rating.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Rating.


        :param score: The score of this Rating.
        :type score: float
        """

        self._score = score

    @property
    def tag(self):
        """Gets the tag of this Rating.


        :return: The tag of this Rating.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Rating.


        :param tag: The tag of this Rating.
        :type tag: str
        """

        self._tag = tag
