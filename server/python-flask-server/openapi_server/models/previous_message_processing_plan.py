# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.message import Message
from openapi_server import util

from openapi_server.models.message import Message  # noqa: E501

class PreviousMessageProcessingPlan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, previous_message_uris=None, previous_messages=None, processing_actions=None, options=None):  # noqa: E501
        """PreviousMessageProcessingPlan - a model defined in OpenAPI

        :param previous_message_uris: The previous_message_uris of this PreviousMessageProcessingPlan.  # noqa: E501
        :type previous_message_uris: List[str]
        :param previous_messages: The previous_messages of this PreviousMessageProcessingPlan.  # noqa: E501
        :type previous_messages: List[Message]
        :param processing_actions: The processing_actions of this PreviousMessageProcessingPlan.  # noqa: E501
        :type processing_actions: List[str]
        :param options: The options of this PreviousMessageProcessingPlan.  # noqa: E501
        :type options: Dict[str, object]
        """
        self.openapi_types = {
            'previous_message_uris': List[str],
            'previous_messages': List[Message],
            'processing_actions': List[str],
            'options': Dict[str, object]
        }

        self.attribute_map = {
            'previous_message_uris': 'previous_message_uris',
            'previous_messages': 'previous_messages',
            'processing_actions': 'processing_actions',
            'options': 'options'
        }

        self._previous_message_uris = previous_message_uris
        self._previous_messages = previous_messages
        self._processing_actions = processing_actions
        self._options = options

    @classmethod
    def from_dict(cls, dikt) -> 'PreviousMessageProcessingPlan':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PreviousMessageProcessingPlan of this PreviousMessageProcessingPlan.  # noqa: E501
        :rtype: PreviousMessageProcessingPlan
        """
        return util.deserialize_model(dikt, cls)

    @property
    def previous_message_uris(self):
        """Gets the previous_message_uris of this PreviousMessageProcessingPlan.

        List of URIs for Message objects to fetch and process  # noqa: E501

        :return: The previous_message_uris of this PreviousMessageProcessingPlan.
        :rtype: List[str]
        """
        return self._previous_message_uris

    @previous_message_uris.setter
    def previous_message_uris(self, previous_message_uris):
        """Sets the previous_message_uris of this PreviousMessageProcessingPlan.

        List of URIs for Message objects to fetch and process  # noqa: E501

        :param previous_message_uris: The previous_message_uris of this PreviousMessageProcessingPlan.
        :type previous_message_uris: List[str]
        """

        self._previous_message_uris = previous_message_uris

    @property
    def previous_messages(self):
        """Gets the previous_messages of this PreviousMessageProcessingPlan.

        List of Message objects to process  # noqa: E501

        :return: The previous_messages of this PreviousMessageProcessingPlan.
        :rtype: List[Message]
        """
        return self._previous_messages

    @previous_messages.setter
    def previous_messages(self, previous_messages):
        """Sets the previous_messages of this PreviousMessageProcessingPlan.

        List of Message objects to process  # noqa: E501

        :param previous_messages: The previous_messages of this PreviousMessageProcessingPlan.
        :type previous_messages: List[Message]
        """

        self._previous_messages = previous_messages

    @property
    def processing_actions(self):
        """Gets the processing_actions of this PreviousMessageProcessingPlan.

        List of order-dependent actions to guide what happens with the Message object(s)  # noqa: E501

        :return: The processing_actions of this PreviousMessageProcessingPlan.
        :rtype: List[str]
        """
        return self._processing_actions

    @processing_actions.setter
    def processing_actions(self, processing_actions):
        """Sets the processing_actions of this PreviousMessageProcessingPlan.

        List of order-dependent actions to guide what happens with the Message object(s)  # noqa: E501

        :param processing_actions: The processing_actions of this PreviousMessageProcessingPlan.
        :type processing_actions: List[str]
        """

        self._processing_actions = processing_actions

    @property
    def options(self):
        """Gets the options of this PreviousMessageProcessingPlan.

        Dict of options that apply during processing in an order independent fashion  # noqa: E501

        :return: The options of this PreviousMessageProcessingPlan.
        :rtype: Dict[str, object]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this PreviousMessageProcessingPlan.

        Dict of options that apply during processing in an order independent fashion  # noqa: E501

        :param options: The options of this PreviousMessageProcessingPlan.
        :type options: Dict[str, object]
        """

        self._options = options
