# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class NodeAttribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, name=None, value=None, url=None):  # noqa: E501
        """NodeAttribute - a model defined in OpenAPI

        :param type: The type of this NodeAttribute.  # noqa: E501
        :type type: str
        :param name: The name of this NodeAttribute.  # noqa: E501
        :type name: str
        :param value: The value of this NodeAttribute.  # noqa: E501
        :type value: str
        :param url: The url of this NodeAttribute.  # noqa: E501
        :type url: str
        """
        self.openapi_types = {
            'type': str,
            'name': str,
            'value': str,
            'url': str
        }

        self.attribute_map = {
            'type': 'type',
            'name': 'name',
            'value': 'value',
            'url': 'url'
        }

        self._type = type
        self._name = name
        self._value = value
        self._url = url

    @classmethod
    def from_dict(cls, dikt) -> 'NodeAttribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NodeAttribute of this NodeAttribute.  # noqa: E501
        :rtype: NodeAttribute
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this NodeAttribute.

        Entity type of this attribute  # noqa: E501

        :return: The type of this NodeAttribute.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NodeAttribute.

        Entity type of this attribute  # noqa: E501

        :param type: The type of this NodeAttribute.
        :type type: str
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this NodeAttribute.

        Formal name of the attribute  # noqa: E501

        :return: The name of this NodeAttribute.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeAttribute.

        Formal name of the attribute  # noqa: E501

        :param name: The name of this NodeAttribute.
        :type name: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this NodeAttribute.

        Value of the attribute  # noqa: E501

        :return: The value of this NodeAttribute.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this NodeAttribute.

        Value of the attribute  # noqa: E501

        :param value: The value of this NodeAttribute.
        :type value: str
        """

        self._value = value

    @property
    def url(self):
        """Gets the url of this NodeAttribute.

        A URL corresponding to this attribute  # noqa: E501

        :return: The url of this NodeAttribute.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NodeAttribute.

        A URL corresponding to this attribute  # noqa: E501

        :param url: The url of this NodeAttribute.
        :type url: str
        """

        self._url = url
