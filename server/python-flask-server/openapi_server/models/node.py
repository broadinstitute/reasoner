# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.node_attribute import NodeAttribute
from openapi_server import util

from openapi_server.models.node_attribute import NodeAttribute  # noqa: E501

class Node(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, uri=None, name=None, type=None, description=None, symbol=None, node_attributes=None):  # noqa: E501
        """Node - a model defined in OpenAPI

        :param id: The id of this Node.  # noqa: E501
        :type id: str
        :param uri: The uri of this Node.  # noqa: E501
        :type uri: str
        :param name: The name of this Node.  # noqa: E501
        :type name: str
        :param type: The type of this Node.  # noqa: E501
        :type type: List[str]
        :param description: The description of this Node.  # noqa: E501
        :type description: str
        :param symbol: The symbol of this Node.  # noqa: E501
        :type symbol: str
        :param node_attributes: The node_attributes of this Node.  # noqa: E501
        :type node_attributes: List[NodeAttribute]
        """
        self.openapi_types = {
            'id': str,
            'uri': str,
            'name': str,
            'type': List[str],
            'description': str,
            'symbol': str,
            'node_attributes': List[NodeAttribute]
        }

        self.attribute_map = {
            'id': 'id',
            'uri': 'uri',
            'name': 'name',
            'type': 'type',
            'description': 'description',
            'symbol': 'symbol',
            'node_attributes': 'node_attributes'
        }

        self._id = id
        self._uri = uri
        self._name = name
        self._type = type
        self._description = description
        self._symbol = symbol
        self._node_attributes = node_attributes

    @classmethod
    def from_dict(cls, dikt) -> 'Node':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Node of this Node.  # noqa: E501
        :rtype: Node
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Node.

        CURIE identifier for this node  # noqa: E501

        :return: The id of this Node.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Node.

        CURIE identifier for this node  # noqa: E501

        :param id: The id of this Node.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def uri(self):
        """Gets the uri of this Node.

        URI identifier for this node\"  # noqa: E501

        :return: The uri of this Node.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Node.

        URI identifier for this node\"  # noqa: E501

        :param uri: The uri of this Node.
        :type uri: str
        """

        self._uri = uri

    @property
    def name(self):
        """Gets the name of this Node.

        Formal name of the entity  # noqa: E501

        :return: The name of this Node.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Node.

        Formal name of the entity  # noqa: E501

        :param name: The name of this Node.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Node.

        Entity type of this node (e.g., protein, disease, etc.)  # noqa: E501

        :return: The type of this Node.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Node.

        Entity type of this node (e.g., protein, disease, etc.)  # noqa: E501

        :param type: The type of this Node.
        :type type: List[str]
        """

        self._type = type

    @property
    def description(self):
        """Gets the description of this Node.

        One to three sentences of description/definition of this entity  # noqa: E501

        :return: The description of this Node.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Node.

        One to three sentences of description/definition of this entity  # noqa: E501

        :param description: The description of this Node.
        :type description: str
        """

        self._description = description

    @property
    def symbol(self):
        """Gets the symbol of this Node.

        Short abbreviation or symbol for this entity  # noqa: E501

        :return: The symbol of this Node.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Node.

        Short abbreviation or symbol for this entity  # noqa: E501

        :param symbol: The symbol of this Node.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def node_attributes(self):
        """Gets the node_attributes of this Node.

        A list of arbitrary attributes for the node  # noqa: E501

        :return: The node_attributes of this Node.
        :rtype: List[NodeAttribute]
        """
        return self._node_attributes

    @node_attributes.setter
    def node_attributes(self, node_attributes):
        """Sets the node_attributes of this Node.

        A list of arbitrary attributes for the node  # noqa: E501

        :param node_attributes: The node_attributes of this Node.
        :type node_attributes: List[NodeAttribute]
        """

        self._node_attributes = node_attributes
